{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Analyzing Growth Curves"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Overview\n",
    "A key feature of bacterial physiology is the growth rate -- a quantitative trait that relates the accumulation of biomass to the number of actively translating ribosomes. This parameter, often denoted mathematically as $\\lambda$, corresponds to the so-called regime of steady-state exponential growth where the accumulation of biomass is, well, exponential with time. In the lab, we measure the optical density (typically at a wavelength of 600 nm) of a culture $OD$ which is proportional to the biomass. Thus, given trustworthy measurements of the $OD$, we can relate these measurements to the growth rate $\\lambda$ as a function of time as \n",
    "\n",
    "$$\n",
    "OD(t) = OD_0\\exp\\left[\\lambda t\\right], \\tag{1}\n",
    "$$\n",
    "\n",
    "Where $OD_0$ is the optical density of the culture at time $t=0$. The functions of the `cremerlab.growth` module described here provide utilities for the reading and cleaning of raw optical density measurements taken at the spectrophotometer as well as a function for a robust Bayesian inference of the key parameters of Equation 1."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Tabulating your data\n",
    "\n",
    "Optical density measurements in the lab are typically taken as either by hand using a spectrophotometer or using a plate reader. We will discuss how to parse and analyze data from the plate reader in a separate tutorial (2021/04/01 - Module still in development) and will focus here on processing readings from a spectrophotometer. \n",
    "\n",
    "While a digital instrument, the data from a spectrophotometer is often recorded by hand on paper as there's not a way to record and export the data in a simple and expedient manner. Thus, the data must then go through the arcane step of being manually entered into a spreadsheet to create a digital record of the data, from which we can start to estimate parameters. \n",
    "\n",
    "While it is tempting to use Microsoft Excel (or similar software) to make complicated spreadsheets that perform linear regressions, make plots, and summarize parameters, the resulting data then becomes a bloated file difficult to parse by eye. Instead, it is preferable to record the  data in a neat and simple format and do all of the analysis and vizualization programmatically. The functions of `cremerlab.growth` do just that. \n",
    "\n",
    "To keep the data simple, you should record in your notebook as few facts about the measurement as possible while keeping extraneous details (such as sample preparation) to your end-of-experiment write up. The image below shows a sample table of growth curve measurements that includes just enough information to do the analysis -- the time of the meausurement (the \"Clock Time\"), the particular sample ID (\"Preculture\"), and the optical density (\"OD\").\n",
    "\n",
    "![](../images/growth_curve_notebook.png)\n",
    "\n",
    "<div class='alert alert-info'> Here we've recorded the clock time in 24 hour format. This is highly advisable versus 12-hour time format as you don't need to specify AM or PM in your measurements.</div>\n",
    "\n",
    "This table is in a \"tidy long-form\" format where each row is a single observation and each column is a dimension. Note that the identity of the preculture (or later termed the *replicate*) is considered in one of the columns, rather than having a separate column for each preculture measurement. The table is not very human readable -- which is just fine. We are reading it with our computer anyway!\n",
    "\n",
    "After finishing the experiment, the data is tabulated into a spreadsheet exactly as is shown in the above photo and saved as a \"comma separated value\" file with the extension `.csv`. Using the [Python library `pandas`](https://pandas.pydata.org/docs/index.html), we can read in the data and easily display it as a table."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>clock_time</th>\n",
       "      <th>od_600nm</th>\n",
       "      <th>replicate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>12:12</td>\n",
       "      <td>0.018</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>12:13</td>\n",
       "      <td>0.016</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12:31</td>\n",
       "      <td>0.019</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>12:31</td>\n",
       "      <td>0.031</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>12:44</td>\n",
       "      <td>0.020</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  clock_time  od_600nm  replicate\n",
       "0      12:12     0.018          1\n",
       "1      12:13     0.016          2\n",
       "2      12:31     0.019          1\n",
       "3      12:31     0.031          2\n",
       "4      12:44     0.020          1"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load the pandas module and read in the data. \n",
    "import pandas as pd\n",
    "raw_data = pd.read_csv('data/growth_data.csv')\n",
    "\n",
    "# Show the first couple of rows of the data. \n",
    "raw_data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that here wew have renamed the \"Preculture\" column as `replicate` as that better captures the meaning of that identifier. We have also renamed \"OD\" to the more descriptive name `od_600nm` which specifies the important information of the measurement wavelength. \n",
    "\n",
    "\n",
    "## Estimating Parameters\n",
    "There are a few steps we need to take to convert this data table to an inferred growth rate.\n",
    "\n",
    "1. **Convert the `clock_time` to `elapsed_time`.** While the clock time is easy to record, it takes a bit of math to figure out how much time has elapsed from one measurement to the next. \n",
    "2. **Restrict the optical density measurements to the linear regime of the spectrophotometer.** The spectrophotometers are not linear across an infinte range of optical density measurements. For the spectrophotometers we use in lab, the linear regime is between approximately 0.04 and 0.4 at 600 nm. \n",
    "3. **Separate the replicates for independent parameter estimates.** These data correspond to different biological replicates which whould be treated as independent experiments\n",
    "\n",
    "Rather than making a bunch of different CSV files, we can do all of this with a single function, `cremerlab.growth.infer_growth_rate` which takes as an argument the raw data (as a pandas DataFrame), the range of OD values to consider (as `od_bounds`) and the column(s) we want to group by.\n",
    "\n",
    "We direct the reader to the Appendix section of this tutorial for an explanation of the actual parameter inference. In short, the `cremerlab.growth.infer_growth_rate` function uses optimization by minimization to find the *maximal a posteriori* parameter set which maximizes the posterior probability distribution over the growth rate λ, the initial optical density $OD_0$, and a homoscedastic error σ. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Estimating parameters...:   0%|          | 0/2 [00:00<?, ?it/s]/opt/anaconda3/lib/python3.8/site-packages/scipy/optimize/optimize.py:2116: RuntimeWarning: invalid value encountered in double_scalars\n",
      "  tmp2 = (x - v) * (fx - fw)\n",
      "/opt/anaconda3/lib/python3.8/site-packages/scipy/optimize/optimize.py:2117: RuntimeWarning: invalid value encountered in double_scalars\n",
      "  p = (x - v) * tmp2 - (x - w) * tmp1\n",
      "/opt/anaconda3/lib/python3.8/site-packages/scipy/optimize/optimize.py:2118: RuntimeWarning: invalid value encountered in double_scalars\n",
      "  tmp2 = 2.0 * (tmp2 - tmp1)\n",
      "Estimating parameters...: 100%|██████████| 2/2 [00:00<00:00,  5.63it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "============================================================\n",
      "Parameter Estimate Summary\n",
      "============================================================\n",
      "\n",
      "\n",
      "Parameter Estimates for grouping ['replicate']: 1\n",
      "------------------------------------------------------------\n",
      "growth rate,  λ = 0.91 ± 0.014 [per unit time]\n",
      "initial OD, OD_0 = 0.04 ± 0.014 [a.u.]\n",
      "homoscedastic error, σ = 0.00 ± 0.001 [a.u.]\n",
      "\n",
      "\n",
      "Parameter Estimates for grouping ['replicate']: 2\n",
      "------------------------------------------------------------\n",
      "growth rate,  λ = 0.86 ± 0.024 [per unit time]\n",
      "initial OD, OD_0 = 0.04 ± 0.024 [a.u.]\n",
      "homoscedastic error, σ = 0.01 ± 0.002 [a.u.]\n",
      "\n",
      "\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "# Load the module and infer the growth rate\n",
    "import cremerlab.growth\n",
    "data, parameters = cremerlab.growth.infer_growth_rate(raw_data, \n",
    "                                                      od_bounds=[0.04, 0.4], \n",
    "                                                      groupby=['replicate'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The above code cell produces a few outputs worth noting. \n",
    "\n",
    "1. It reports a `RuntimeWarning` indicating that the parameter ran into a calcualtion error. This is a common error and can typically be ignored. \n",
    "2. It prints a progress bar indicating how long its taking to do the estimate.\n",
    "3. It prints out a summary of the the resulting parameters. This reports the *maximum a posterior* value of each parameter (the MAP) as well as the 95% Bayesian credible interval for the parameters (which you can think of as the uncertainty, but *not* a standard deviation). This feature can be turned off by passing the argument `print_params=False` to the function.\n",
    "\n",
    "These three features provide a sense of how the parameter estimation went, what the problems were, and what the resulting parameters are. \n",
    "\n",
    "Aside from printing out the parameter summaries, the function returns two pandas DataFrames, `data`, and `parameters`. The DataFrame `data` looks as follows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>elapsed_time_hr</th>\n",
       "      <th>od_600nm</th>\n",
       "      <th>replicate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.044</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.216667</td>\n",
       "      <td>0.052</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.416667</td>\n",
       "      <td>0.064</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.600000</td>\n",
       "      <td>0.072</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.750000</td>\n",
       "      <td>0.080</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   elapsed_time_hr  od_600nm  replicate\n",
       "0         0.000000     0.044          1\n",
       "1         0.216667     0.052          1\n",
       "2         0.416667     0.064          1\n",
       "3         0.600000     0.072          1\n",
       "4         0.750000     0.080          1"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This DataFrame is almost the same as what we originally passed into `cremerlab.growth.infer_growth_rate`, but reflects the changes that were made to the DataFrame to conduct the inference. The `clock_time` column is gone, replaced with `elapsed_time_hr` and the \n",
    "optical density column `od_600nm` has only the values which were within our specified `od_bounds`.\n",
    "\n",
    "The DataFrame `parameters` looks like this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cred_int</th>\n",
       "      <th>map_val</th>\n",
       "      <th>parameter</th>\n",
       "      <th>replicate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.013520</td>\n",
       "      <td>0.909128</td>\n",
       "      <td>growth_rate</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.001142</td>\n",
       "      <td>0.040896</td>\n",
       "      <td>od_init</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.000870</td>\n",
       "      <td>0.002742</td>\n",
       "      <td>sigma</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.024006</td>\n",
       "      <td>0.862343</td>\n",
       "      <td>growth_rate</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.002290</td>\n",
       "      <td>0.042587</td>\n",
       "      <td>od_init</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cred_int   map_val    parameter  replicate\n",
       "0  0.013520  0.909128  growth_rate          1\n",
       "1  0.001142  0.040896      od_init          1\n",
       "2  0.000870  0.002742        sigma          1\n",
       "0  0.024006  0.862343  growth_rate          2\n",
       "1  0.002290  0.042587      od_init          2"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "parameters.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This contains the parameter estimates as well as their credible intervals (CI's). This is also a long-form tidy DataFrame with each row corresponding to a single estimate."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Visualing the Inference\n",
    "Doing the estimate is only half of the battle. You should always plot your data along with the information about the inference to see if the results pass the eye test. \n",
    "\n",
    "Creating a visualization of these data can be included as an argument in the `cremerlab.growth.infer_growth_rate` function, which makes a plot of the measurements, line of best fit, and approximate posterior distribution marginalized over the homoscedastic error σ. To generate this fiz, we just have to pass the `viz=True` argument to the inference."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Estimating parameters...:   0%|          | 0/2 [00:00<?, ?it/s]/opt/anaconda3/lib/python3.8/site-packages/scipy/optimize/optimize.py:2116: RuntimeWarning: invalid value encountered in double_scalars\n",
      "  tmp2 = (x - v) * (fx - fw)\n",
      "/opt/anaconda3/lib/python3.8/site-packages/scipy/optimize/optimize.py:2117: RuntimeWarning: invalid value encountered in double_scalars\n",
      "  p = (x - v) * tmp2 - (x - w) * tmp1\n",
      "/opt/anaconda3/lib/python3.8/site-packages/scipy/optimize/optimize.py:2118: RuntimeWarning: invalid value encountered in double_scalars\n",
      "  tmp2 = 2.0 * (tmp2 - tmp1)\n",
      "Estimating parameters...: 100%|██████████| 2/2 [00:00<00:00,  4.06it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating plot...\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x432 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Run the inference, generating a vizualization.\n",
    "data, parameters, plot = cremerlab.growth.infer_growth_rate(raw_data, \n",
    "                                                      od_bounds=[0.04, 0.4], \n",
    "                                                      groupby=['replicate'],\n",
    "                                                      viz=True,\n",
    "                                                      print_params=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The above performs the inference and returns a plot  summarizing the inference all in one go. The plots on the left-hand side show the data (points) superimposed with the line of best fit given the inferred parameters. The plots on the right-hand side show the approximation of the marginal posterior distribution over the parameters. The contours represent the 1st (smallest) through 4th (largest) standard deviations of the posterior. The red point indicates the MAP, which is used to generate the fits on the left-hand plots.\n",
    "\n",
    "In passing `viz = True` as an argument, the function now returns a `plot` object which is a matplotlib Figure canvas and the corresponding axes. With this, we can continue to manipulate the plots as we see fit and can even save it as a PDF as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 432x288 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Unpack the plot objects and save the plot to disk.\n",
    "fig, ax = plot \n",
    "plt.savefig('./inference_plot.pdf')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Appendix: Statistical Model for Growth Rate Inference\n",
    "The function `cremerlab.growth.infer_growth_rate` uses a Bayesian definition of probability to estimate the parameter values. We will leave the details of Bayesian statistics to other resources (such as this [excellent course by Justin Bois at Caltech](https://bebi103b.caltech.edu) and here introduce the statistical model employed by `cremerlab.growth.infer_growth_rate`.\n",
    "\n",
    "### Assembling the Posterior Distribution\n",
    "\n",
    "\n",
    "We are interested in estimating values for the growth rate $\\lambda$ and the initial optical density $OD_0$. By Bayes' theorem, the posterior distribution of these parameters given our data (composed of time $t$ and optical density measurements $OD$) can be stated as \n",
    "\n",
    "$$\n",
    "g(\\lambda\\,OD_0\\,\\vert\\, t, OD) = \\frac{f(OD\\,\\vert\\, t, \\lambda, OD_0)g(OD_0, \\lambda)}{f(OD)}, \\tag{A.1}\n",
    "$$\n",
    "\n",
    "where we use $g$ and $f$ to denote probability densities over parameters and data, respectively. The numerator is the product of the *likelihood* ($f(OD\\,\\vert\\, t, \\lambda, OD_0)$) and the *prior* ($g(\\lambda, OD_0)$) distributions. The denominator is the likelihood marginalized over the parameters and, for our purposes, will just be treated as a normalization constant. \n",
    "\n",
    "#### The Likelihood Function\n",
    "The likelihood captures the probability of observing our data ($OD$) at the given times $t$ given any combination of parameter values for $\\lambda$ and $OD_0$. We assume that this  is described by a Gaussian distribution with a a mean $\\mu$ and a standard deviation $\\sigma$ of \n",
    "\n",
    "$$\n",
    "f(OD\\,\\vert\\,t\\lambda, OD_0) = \\frac{1}{\\sqrt{2\\pi\\sigma^2}}\\exp\\left[-\\frac{(OD - \\mu)^2}{2\\sigma^2}\\right]. \\tag{A.2}\n",
    "$$\n",
    "\n",
    "The mean $\\mu$ is defined by Equation 1 for any combination of $\\lambda$ and $OD_0$. \n",
    "\n",
    "\n",
    "#### The Prior Distributions\n",
    "The prior distributions capture all knowledge we have of the parameters before we *ever* look  at our data. In using a normal distribution for the likelihoood, we have introduced a new parameter $\\sigma$ which much also be included in our prior distributions.\n",
    "\n",
    "Picking prior distributions often requires a lot of careful thought about the system. While we leave the details of defining priors and their effects to other resources, we can state that we know all of our parameters must be positive. Furthermore, we know that they will be relatively small as growth ratees don't typically extend past 2hr^{-1} and are often less than 1 hr$^{-1}$ for the lab strains and conditions we use. Similarly, we know that the initial optical density $OD_0$ by design is small and close to 0.04, as that is the lower obund we consider for the spectrophometers we typically use. Finally, we trust our experiments enough to say that the homoscedastic error $\\sigma$ is going to be sufficiently small such that its well below 1, as we typically see clear exponential growth in these types of experiments. \n",
    "\n",
    "With the constraints in mind that all the parameters (below denoted generically as $\\theta$) must be greater than zero and less than one, we choose a Gamma function as a prior distribution,\n",
    "\n",
    "$$\n",
    "g(\\theta\\,\\vert\\,\\alpha, \\beta) = \\frac{1}{\\Gamma(\\alpha)}\\frac{(\\beta\\theta)^\\alpha}{\\theta}\\exp\\left[-\\beta\\theta\\right]. \\tag{A.3}\n",
    "$$\n",
    "with $\\alpha = 2.2$ and $\\beta = 5$. These values result in  distributions where 95% of the probability density is below a parameter value of 1.\n",
    "\n",
    "### Estimating the Parameters\n",
    "It is typical practice to evaluate the posterior distribution using Markov chain Monte Carlo which is a pretty easy task given modern computational power. However, as this problem is very well defined, we've opted to evaluate this posterior distribution by using optimization by minimization. Doing so allows us to evaluate the *maximum a posterior* parameter set (colloquially termed the MAP) which represents the parameter values which maximize the posterior distribution. Given these values, we can estimate the uncertainty in each parameter by approximating the posterior distribution as a multivariate normal distribution. \n",
    "\n",
    "Future editions of this tutorial will go into this in more depth, but we direct the reader to [this excellent treatment of the problem](https://bebi103b.github.io/lessons/06/normal_optimization.html) in the context of biological data."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
